git init

git add

Para que o Git saiba quem está realizando as alterações, ele precisa de algumas configurações. Na primeira vez que você tentar realizar um commit em uma máquina, ele pedirá que você o configure.
Como podemos definir o nome da pessoa que executa commits no repositório local atual?

git config --local user.name "Nome da pessoa"

Assim todos os commits executados neste repositório serão atribuídos à pessoa com nome Nome da pessoa. Para mais detalhes e outras configurações possíveis (até algumas mais avançadas), você pode conferir este link: https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration.



git commit -m "qq msg"

git log --oneline
git log -p
git log --pretty="format:%H"
git log --pretty="format:%h %s"
git log --pretty="format:%h %s %ae"


https://devhints.io/git-log-format



Conforme vimos no último vídeo, podemos visualizar o histórico de alterações em nosso projeto de forma muito fácil, através do comando git log.

Apesar de ser fácil, este comando é muito poderoso. Execute git log --help e veja algumas das opções possíveis. Para alguns exemplos mais fáceis de entender, você pode pesquisar sobre git log ou dar uma olhada neste link: https://devhints.io/git-log.


.gitignore

arquivo a indicação de pastas e arquivos que o git deve ignorar na monitoração e commits
um arquivo/pasta por linha
ele deve ser comitado no projeto mas pode ter alterações locais não definitivas também(conclusão minha)
se terminar com / é pasta e tudo dentro dela será ignorado

Devemos gerar um commit sempre que a nossa base de código está em um estado do qual gostaríamos de nos lembrar. Nunca devemos ter commits de códigos que não funcionam, mas também não é interessante deixar para commitar apenas no final de uma feature.

Essa pode ser uma discussão sem fim e cada empresa ou equipe pode seguir uma estratégia diferente. Estude sobre o assunto, entenda o que faz mais sentido para você e sua equipe e seja feliz! 



Nesta aula, aprendemos:

    Que um commit é a forma de salvar um estado ou versão do nosso código;
    Como adicionar arquivos para serem commitados com git add;
    Como commitar arquivos, utilizando o comando git commit;
    Como verificar o histórico de commits, através do git log e algumas de suas opções:
        git log --oneline
        git log -p
        git log --pretty="parametros de formatação"
    Como fazer o Git não monitorar arquivos, através do .gitignore
    Que não devemos realizar commit, ou seja, salvar um estado, da nossa aplicação que não esteja funcionando.



mkdir CursoGit-Servidor
cd CursoGit-Servidor/
git init --bare

Initialized empty Git repository in /home/<userid>/CursoGit-Servidor/

cd ../CursoGit/
git remote
(resposta nada por enquanto)
git remote add local /home/<userid>/CursoGit-Servidor/
git remote
resposta: local

git remote -v
local	/home/<userid>/CursoGit-Servidor/ (fetch)
local	/home/<userid>/CursoGit-Servidor/ (push)




E então acessaremos esta pasta, com cd servidor, dentro da qual rodaremos git init. Como este servidor será um repositório do Git que somente armazenará as alterações, ou seja, não o acessaremos para editar arquivos, por exemplo, usaremos git init --bare, cujo parâmetro indica que este repositório é puro, que contém apenas as alterações dos arquivos, e não uma cópia física de cada um dos arquivos.

Isso nos traz algumas facilidades e permite que adicionemos este repositório remotamente em outro. Após a criação do repositório, o Git nos fornece o caminho para ele, que serve como nosso servidor. Copiaremos o caminho, no caso C:/Users/ALURA/Documents/git-e-github/servidor, e voltaremos à pasta "vinicius", onde se encontra nosso projeto, por meio do comando cd ../vinicius.


git push -u origin master

# quando usa o "-u origin master" implica que todas as vezes a partir desta, que estiver na branch "master", vai entregar no repositorio "origin"
# se não colocar o "-u" o complemento para git push "... origin master sempre terá que ser indicado, caso contrario, usa só "git push"



CONSOLIDANDO:




Chegou a hora de você pôr em prática o que foi visto na aula. Para isso, execute os passos listados abaixo.

1) Crie uma pasta nova em seu computador;  /home/<cpf>/CursoGit-Consolidando/servidor

2) No terminal (ou Git Bash, no Windows) navegue até a pasta recém criada (utilize o comando cd para navegar entre pastas);

3) Execute o comando git init --bare;

ls
branches  config  description  HEAD  hooks  info  objects  refs

ls -la
total 40
drwxr-xr-x  7 _RLSL 4096 dez 23 17:28 .
drwx------ 44 _RLSL 4096 dez 23 17:26 ..
drwxr-xr-x  2 _RLSL 4096 dez 23 17:28 branches
-rw-r--r--  1 _RLSL   66 dez 23 17:28 config
-rw-r--r--  1 _RLSL   73 dez 23 17:28 description
-rw-r--r--  1 _RLSL   23 dez 23 17:28 HEAD
drwxr-xr-x  2 _RLSL 4096 dez 23 17:28 hooks
drwxr-xr-x  2 _RLSL 4096 dez 23 17:28 info
drwxr-xr-x  4 _RLSL 4096 dez 23 17:28 objects
drwxr-xr-x  4 _RLSL 4096 dez 23 17:28 refs



4) Navegue até a pasta onde se encontra o seu projeto;

5) Execute o comando git remote add local {caminho}. Substitua {caminho} pelo caminho completo da pasta recém criada;

git remote add local /home/<cpf>/CursoGit-Consolidando/servidor


6) Crie uma nova pasta em seu computador, para representar o trabalho de outra pessoa;

/home/<cpf>/CursoGit-Consolidando/usuario2

7) No terminal (ou Git Bash, no Windows) navegue até a pasta recém criada;

8) Execute o comando git clone {caminho} projeto. Substitua {caminho} pelo caminho completo da pasta que criamos no primeiro passo;

git clone /home/<cpf>/CursoGit-Consolidando/servidor


9) Observe que o repositório clonado está vazio;

10) Acesse a pasta Projeto e execute o comando 'git remote rename origin local' para renomear o repositório local da outra pessoa de "origin" para "local";

cd /home/<cpf>/CursoGit-Consolidando/usuario2/servidor
git remote rename origin local

11) Navegue até a pasta onde se encontra o seu projeto original;

12) Execute o comando git push local master para enviar as suas modificações para o seu servidor;

13) Navegue até a pasta criada no passo 6;

14) Execute o comando git pull local master para baixar as modificações;

15) Abra o seu navegador e acesse http://github.com/;

16) Crie uma conta; sergiop2021

17) Crie um novo repositório, clicando no símbolo de adição no canto superior direito;

18) No terminal (ou Git Bash, no Windows) adicione, ao seu projeto inicial, o repositório remoto recém criado (os comandos são mostrados pelo próprio GitHub);

19) Execute git push origin master para enviar as suas alterações para o repositório no GitHub.



