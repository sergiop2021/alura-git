git init

git add

Para que o Git saiba quem está realizando as alterações, ele precisa de algumas configurações. Na primeira vez que você tentar realizar um commit em uma máquina, ele pedirá que você o configure.
Como podemos definir o nome da pessoa que executa commits no repositório local atual?

git config --local user.name "Nome da pessoa"

Assim todos os commits executados neste repositório serão atribuídos à pessoa com nome Nome da pessoa. Para mais detalhes e outras configurações possíveis (até algumas mais avançadas), você pode conferir este link: https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration.



git commit -m "qq msg"

git log --oneline
git log -p
git log --pretty="format:%H"
git log --pretty="format:%h %s"
git log --pretty="format:%h %s %ae"


https://devhints.io/git-log-format



Conforme vimos no último vídeo, podemos visualizar o histórico de alterações em nosso projeto de forma muito fácil, através do comando git log.

Apesar de ser fácil, este comando é muito poderoso. Execute git log --help e veja algumas das opções possíveis. Para alguns exemplos mais fáceis de entender, você pode pesquisar sobre git log ou dar uma olhada neste link: https://devhints.io/git-log.


.gitignore

arquivo a indicação de pastas e arquivos que o git deve ignorar na monitoração e commits
um arquivo/pasta por linha
ele deve ser comitado no projeto mas pode ter alterações locais não definitivas também(conclusão minha)
se terminar com / é pasta e tudo dentro dela será ignorado

Devemos gerar um commit sempre que a nossa base de código está em um estado do qual gostaríamos de nos lembrar. Nunca devemos ter commits de códigos que não funcionam, mas também não é interessante deixar para commitar apenas no final de uma feature.

Essa pode ser uma discussão sem fim e cada empresa ou equipe pode seguir uma estratégia diferente. Estude sobre o assunto, entenda o que faz mais sentido para você e sua equipe e seja feliz! 



